// Auto-generated from warehouse.html.
// DO NOT EDIT.

library x_warehouse;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'package:web_ui/web_ui.dart';

import 'package:web_ui/watcher.dart' as watchers;

import 'dart:html';

import 'dart:json';

import 'dart:uri';

import '../../ui/ui.dart';

class Warehouse extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated_html.DivElement __listBloc;
  
  autogenerated_html.FormElement __listFilter;
  
  autogenerated_html.FieldSetElement __filterZoneWh;
  
  autogenerated_html.InputElement __warehouseFilter;
  
  autogenerated_html.UnknownElement __e11;
  
  List<autogenerated.WatcherDisposer> __stoppers1;
  
  autogenerated_html.Node _endPosition__e11;
  
  bool _isVisible__e11 = false;
  
  autogenerated_html.UListElement __warehouseList;
  
  autogenerated_html.UnknownElement __e10;
  
  List<autogenerated.WatcherDisposer> __stoppers2_1;
  
  List<Function> _removeChild__e10 = [];
  
  autogenerated_html.Node _endPosition__e10;
  
  autogenerated_html.DivElement __editBloc;
  
  autogenerated_html.FormElement __editWh;
  
  autogenerated_html.FieldSetElement __nameZoneWh;
  
  autogenerated_html.InputElement __whName;
  
  autogenerated_html.InputElement __whType;
  
  autogenerated_html.DataListElement __whTypeList;
  
  autogenerated_html.SelectElement __whTypeStd;
  
  autogenerated_html.InputElement __whCode;
  
  autogenerated_html.FieldSetElement __adresseZoneWh;
  
  autogenerated_html.InputElement __whAdresse;
  
  autogenerated_html.InputElement __whAdresseComplement;
  
  autogenerated_html.InputElement __whCodePostal;
  
  autogenerated_html.InputElement __whVille;
  
  autogenerated_html.FieldSetElement __contactZoneWh;
  
  autogenerated_html.InputElement __whCourriel;
  
  autogenerated_html.InputElement __whUrl;
  
  autogenerated_html.InputElement __whTelephoneFixe;
  
  autogenerated_html.InputElement __whTelephoneFax;
  
  autogenerated_html.FieldSetElement __noteZoneWh;
  
  autogenerated_html.InputElement __whUrlGeneawiki;
  
  autogenerated_html.TextAreaElement __whNote;
  
  autogenerated_html.InputElement __whId;
  
  autogenerated_html.ButtonElement __e12;
  
  autogenerated_html.EventListener __listener__e12_click_5;
  
  autogenerated_html.ButtonElement __e13;
  
  autogenerated_html.EventListener __listener__e13_click_6;
  
  autogenerated_html.ButtonElement __e14;
  
  autogenerated_html.EventListener __listener__e14_click_7;
  
  autogenerated_html.ButtonElement __e15;
  
  autogenerated_html.EventListener __listener__e15_click_8;
  
  Warehouse.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    
    _root.innerHtml = '''
    
    <div class="app-row">
    <div id="list-bloc">
    <form id="list-filter">
    <fieldset id="filter-zone-wh">
    <legend>Structures</legend>
    <div class="input-prepend">
    <span class="add-on"><i class="icon-filter"></i></span>
    <input id="warehouse-filter" type="text" placeholder="Filtrer">
    </div>
    </fieldset>
    </form>
    
    <template id="__e-11" style="display:none"></template>
    </div>
    <div id="edit-bloc">
    <form id="edit-wh" class="form-horizontal" autocomplete="on">
    <div class="form-edit app-column">
    <div class="app-row">
    <fieldset id="name-zone-wh">
    <legend>Nom et code</legend>
    <div class="control-group label-small">
    <label class="control-label" for="wh-name">Nom</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-home"></i></span>
    <input id="wh-name" class="field input-xlarge" name="nom" type="text" required="">
    </div>
    </div>
    </div>
    
    <div class="control-group label-small">
    <label class="control-label" for="wh-type">Type</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-tag"></i></span>
    <input id="wh-type" class="field input-medium" name="type" type="text" list="wh-type-list" value="">
    
    <datalist id="wh-type-list">
    <label for="wh-type-std" title="Choisir une valeur standard">ou</label>
    <select id="wh-type-std" name="type">
    <option value="archive">Archive</option>
    <option value="bibliothèque">Bibliothèque</option>
    <option value="cimetière">Cimetière</option>
    <option value="mairie">Mairie</option>
    </select>
    </datalist>
    </div>
    </div>
    </div>
    
    <div class="control-group label-small">
    <label class="control-label" for="wh-code">Code</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-barcode"></i></span>
    <input id="wh-code" class="field input-small" name="code" type="text" value="">
    </div>
    </div>
    </div>
    </fieldset>
    
    <fieldset id="adresse-zone-wh">
    <legend>Adresse</legend>
    <div class="control-group label-large">
    <label class="control-label" for="wh-adresse">Adresse</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-road"></i></span>
    <input id="wh-adresse" class="field input-xlarge" name="adresse" type="text" value="">
    </div>
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-adresse-complement">Complément</label>
    <div class="controls">
    <input id="wh-adresse-complement" class="field input-xlarge" name="adresse:complement" type="text" value="">
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-code-postal">Code postal</label>
    <div class="controls">
    <input id="wh-code-postal" class="field" name="code_postal" type="text" value="">
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-ville">Ville</label>
    <div class="controls">
    <input id="wh-ville" class="field" name="ville" type="text" value="">
    </div>
    </div>
    </fieldset>
    </div>
    
    <div class="app-row">
    <fieldset id="contact-zone-wh">
    <legend>Contact</legend>
    <div class="control-group label-large">
    <label class="control-label" for="wh-courriel">Courriel</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-envelope"></i></span>
    <input id="wh-courriel" class="field" name="courriel" type="email" value="">*
    </div>
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-url">Url du site web</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on">@</span>
    <input id="wh-url" class="field span4" name="url" type="url" value="">
    </div>
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-telephone-fixe">
    <abbr title="Téléphone fixe">Tél.</abbr>
    </label>
    <div class="controls">
    <input id="wh-telephone-fixe" class="field" name="telephone:fixe" type="tel" value="">
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-telephone-fax">Fax</label>
    <div class="controls">
    <input id="wh-telephone-fax" class="field" name="telephone:fax" type="tel" value="">
    </div>
    </div>
    </fieldset>
    
    <fieldset id="note-zone-wh">
    <legend>Notes et infos compélementaires</legend>
    <div class="control-group label-large">
    <label class="control-label" for="wh-url-geneawiki">Url Geneawiki</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on">@</span>
    <input id="wh-url-geneawiki" class="field span4" name="url:geneawiki" type="url" value="">
    </div>
    </div>
    </div>
    <div class="control-group label-large">
    <label class="control-label" for="wh-note">Note</label>
    <div class="controls">
    <div class="input-prepend">
    <span class="add-on"><i class="icon-comment"></i></span>
    <textarea id="wh-note" class="field span4" name="note"></textarea>
    </div>
    </div>
    </div>
    </fieldset>
    </div>
    </div>
    
    <div class="form-actions">
    <input id="wh-id" class="field" name="id" type="hidden">
    
    <button type="submit" class="btn btn-success pull-right hide update-warehouse-cmd" id="__e-12">
    Modifier
    </button>
    <button type="submit" class="btn btn-primary pull-right add-warehouse-cmd" id="__e-13">
    Ajouter
    </button>
    
    <button type="button" class="btn btn-danger hide delete-warehouse-cmd" id="__e-14">
    Supprimer
    </button>
    <button type="reset" class="btn reset-warehouse-cmd" id="__e-15">
    Vider
    </button>
    </div>
    </form>
    </div>
    </div>
    <script type="application/dart"></script>
    <script type="text/javascript" src="https://dart.googlecode.com/svn/branches/bleeding_edge/dart/client/dart.js"></script>
    ''';
    __listBloc = _root.query('#list-bloc');
    __listFilter = __listBloc.query('#list-filter');
    __filterZoneWh = __listFilter.query('#filter-zone-wh');
    __warehouseFilter = __filterZoneWh.query('#warehouse-filter');
    __e11 = __listBloc.query('#__e-11');
    __stoppers1 = [];
    __editBloc = _root.query('#edit-bloc');
    __editWh = __editBloc.query('#edit-wh');
    __nameZoneWh = __editWh.query('#name-zone-wh');
    __whName = __nameZoneWh.query('#wh-name');
    __whType = __nameZoneWh.query('#wh-type');
    __whTypeList = __nameZoneWh.query('#wh-type-list');
    __whTypeStd = __whTypeList.query('#wh-type-std');
    __whCode = __nameZoneWh.query('#wh-code');
    __adresseZoneWh = __editWh.query('#adresse-zone-wh');
    __whAdresse = __adresseZoneWh.query('#wh-adresse');
    __whAdresseComplement = __adresseZoneWh.query('#wh-adresse-complement');
    __whCodePostal = __adresseZoneWh.query('#wh-code-postal');
    __whVille = __adresseZoneWh.query('#wh-ville');
    __contactZoneWh = __editWh.query('#contact-zone-wh');
    __whCourriel = __contactZoneWh.query('#wh-courriel');
    __whUrl = __contactZoneWh.query('#wh-url');
    __whTelephoneFixe = __contactZoneWh.query('#wh-telephone-fixe');
    __whTelephoneFax = __contactZoneWh.query('#wh-telephone-fax');
    __noteZoneWh = __editWh.query('#note-zone-wh');
    __whUrlGeneawiki = __noteZoneWh.query('#wh-url-geneawiki');
    __whNote = __noteZoneWh.query('#wh-note');
    __whId = __editWh.query('#wh-id');
    __e12 = __editWh.query('#__e-12');
    __e13 = __editWh.query('#__e-13');
    __e14 = __editWh.query('#__e-14');
    __e15 = __editWh.query('#__e-15');
    
  }
  
  void inserted_autogenerated() {
    _endPosition__e11 = __e11;
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => !whListEmpty, (__e) {
      bool showNow = __e.newValue;
      if (_isVisible__e11 && !showNow) {
        _isVisible__e11 = false;
        
        __warehouseList = null;
        (__stoppers2_1..forEach((s) => s())).clear();
        _endPosition__e10 = autogenerated.removeNodes(__e10, _endPosition__e10);
        for (var remover in _removeChild__e10) remover();
        _removeChild__e10.clear();
        
        __e10 = null;
        
        _endPosition__e11 = autogenerated.removeNodes(__e11, _endPosition__e11);
        
      } else if (!_isVisible__e11 && showNow) {
        
        _isVisible__e11 = true;
        
        __warehouseList = new autogenerated_html.Element.html('<ul id="warehouse-list" class="nav nav-list">\n                <template id="__e-10" style="display:none"></template>\n              </ul>');
        __e10 = __warehouseList.query('#__e-10');
        __stoppers2_1 = [];
        
        autogenerated.insertAllBefore(__e11.parent, __e11.nextNode,
        
        [new autogenerated_html.Text('\n              '), __warehouseList, _endPosition__e11 = new autogenerated_html.Text('\n            ')]);
        
        _endPosition__e10 = __e10;
        __stoppers2_1.add(autogenerated.watchAndInvoke(() => whList, (_) {
          for (var remover in _removeChild__e10) remover();
          _removeChild__e10.clear();
          
          _endPosition__e10 = autogenerated.removeNodes(__e10, _endPosition__e10);
          var __insert___e10 = __e10.nextNode;
          for (var wh in whList) {
            autogenerated_html.LIElement __e9;
            autogenerated_html.EventListener __listener__e9_click_3_2_1;
            autogenerated_html.AnchorElement __e8;
            List<autogenerated.WatcherDisposer> __stoppers4_3_2;
            var __binding7;
            __e9 = new autogenerated_html.Element.html('<li>\n                    <a id="__e-8"></a>\n                  </li>');
            __e8 = __e9.query('#__e-8');
            __binding7 = new autogenerated_html.Text('');
            __e8.nodes.add(__binding7);
            __stoppers4_3_2 = [];
            autogenerated.insertAllBefore(__e10.parent, __insert___e10,
            [new autogenerated_html.Text('\n                  '), __e9, _endPosition__e10 = new autogenerated_html.Text('\n                ')]);
            __listener__e9_click_3_2_1 = ($event) {
              onSelectedWarehouse($event);
              autogenerated.dispatch();
            };
            __e9.on.click.add(__listener__e9_click_3_2_1);
            
            __stoppers4_3_2.add(autogenerated.watchAndInvoke(() => wh['id'], (__e) { __e8.attributes['data-id'] = __e.newValue; }));
            __stoppers4_3_2.add(autogenerated.watchAndInvoke(() => '${wh['nom']}', (__e) {
              __binding7 = autogenerated.updateBinding(wh['nom'], __binding7, __e.newValue);
            }));
            _removeChild__e10.add(() {
              __e9.on.click.remove(__listener__e9_click_3_2_1);
              __listener__e9_click_3_2_1 = null;
              
              __e9 = null;
              (__stoppers4_3_2..forEach((s) => s())).clear();
              __e8 = null;
              __binding7 = null;
            });
          }
        }));
        
      }
    }));
    
    __listener__e12_click_5 = ($event) {
      updateWarehouse($event);
      autogenerated.dispatch();
    };
    __e12.on.click.add(__listener__e12_click_5);
    
    __listener__e13_click_6 = ($event) {
      addWarehouse($event);
      autogenerated.dispatch();
    };
    __e13.on.click.add(__listener__e13_click_6);
    
    __listener__e14_click_7 = ($event) {
      deleteWarehouse($event);
      autogenerated.dispatch();
    };
    __e14.on.click.add(__listener__e14_click_7);
    
    __listener__e15_click_8 = ($event) {
      resetWarehouse($event);
      autogenerated.dispatch();
    };
    __e15.on.click.add(__listener__e15_click_8);
    
  }
  
  void removed_autogenerated() {
    _root = null;
    
    __listBloc = null;
    
    __listFilter = null;
    
    __filterZoneWh = null;
    
    __warehouseFilter = null;
    
    (__stoppers1..forEach((s) => s())).clear();
    
    if (_isVisible__e11) {
      
      _endPosition__e11 = autogenerated.removeNodes(__e11, _endPosition__e11);
      
      __warehouseList = null;
      (__stoppers2_1..forEach((s) => s())).clear();
      _endPosition__e10 = autogenerated.removeNodes(__e10, _endPosition__e10);
      for (var remover in _removeChild__e10) remover();
      _removeChild__e10.clear();
      
      __e10 = null;
      
    }
    
    __e11 = null;
    
    __editBloc = null;
    
    __editWh = null;
    
    __nameZoneWh = null;
    
    __whName = null;
    
    __whType = null;
    
    __whTypeList = null;
    
    __whTypeStd = null;
    
    __whCode = null;
    
    __adresseZoneWh = null;
    
    __whAdresse = null;
    
    __whAdresseComplement = null;
    
    __whCodePostal = null;
    
    __whVille = null;
    
    __contactZoneWh = null;
    
    __whCourriel = null;
    
    __whUrl = null;
    
    __whTelephoneFixe = null;
    
    __whTelephoneFax = null;
    
    __noteZoneWh = null;
    
    __whUrlGeneawiki = null;
    
    __whNote = null;
    
    __whId = null;
    
    __e12.on.click.remove(__listener__e12_click_5);
    __listener__e12_click_5 = null;
    
    __e12 = null;
    
    __e13.on.click.remove(__listener__e13_click_6);
    __listener__e13_click_6 = null;
    
    __e13 = null;
    
    __e14.on.click.remove(__listener__e14_click_7);
    __listener__e14_click_7 = null;
    
    __e14 = null;
    
    __e15.on.click.remove(__listener__e15_click_8);
    __listener__e15_click_8 = null;
    
    __e15 = null;
    
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated_html.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  Map warehouses = {};
  
  void created() {
    this.loadWarehouses();
  }
  
  void loadWarehouses() {
    var url = 'http://localhost/dart/depim/server/services/0.1/structure';
    
    // call the web server asynchronously
    var request = new HttpRequest.get(url, onSuccess(HttpRequest req) {
      this.warehouses = JSON.parse(req.responseText);
      watchers.dispatch();
    });
  }
  
  List get whList {
    var res = new List();
    if (! warehouses.isEmpty) {
      warehouses.forEach((var key, var wh) {
        try {
          if (wh['tags']['nom'] != '') {
            res.add({'id': wh['meta']['id'], 'nom': wh['tags']['nom']});
          } else {
            res.add({'id': wh['meta']['id'], 'nom': 'Sans nom'});
          }
        } catch(e) {
          res.add({'id': wh['meta']['id'], 'nom': 'Sans nom'});
        }
      });
    }
    return res;
  }
  
  bool get whListEmpty => whList.isEmpty;
  
  void onSelectedWarehouse(Event e) {
    Element clickedElem = e.target;
    var id = clickedElem.attributes['data-id'];
    
    // Put warehouse infos in the form
    this.loadWarehouseDetails(id);
    
    // Show delete command
    queryAll('.delete-warehouse-cmd').forEach((elem) {
      elem.attributes['data-id'] = id;
      elem.classes.remove('hide');
    });
    queryAll('.update-warehouse-cmd').forEach((elem) {
      elem.attributes['data-id'] = id;
      elem.classes.remove('hide');
    });
  }
  
  void loadWarehouseDetails(id) {
    var url = 'http://localhost/dart/depim/server/services/0.1/structure/$id';
    
    // call the web server asynchronously
    var request = new HttpRequest.get(url, onSuccess(HttpRequest req) {
      query('.field[name="id"]').value = id;
      var warehouse = JSON.parse(req.responseText);
      Map tags = warehouse['tags'];
      tags.forEach((key, value) {
        query('.field[name="$key"]').value = value;
      });
    });
  }
  
  void addWarehouse(Event e) {
    e.preventDefault();
    var dataUrl = 'http://localhost/dart/depim/server/services/0.1/structure',
    tags = getTags(),
    meta = {
      'utilisateurId' : 1,
      'tags' : {
        'etat' : 'A',
        'type' : 'structure',
        'commentaire' : 'Ajout de la structure "${tags['nom']}".',
        'source' : tags['urlGeneawiki']
      }
    },
    data = {'meta' : meta, 'tags': tags},
    encodedData = JSON.stringify(data);
    
    var httpRequest = new HttpRequest();
    httpRequest.open('POST', dataUrl);
    httpRequest.setRequestHeader('Content-type', 'application/json');
    httpRequest.on.loadEnd.add((e) => addEnd(httpRequest));
    print(encodedData);
    httpRequest.send(encodedData);
  }
  
  Map getTags() {
    var nom = query('input[name="nom"]').value,
    type = query('input[name="type"]').value,
    code = query('input[name="code"]').value,
    adresse = query('input[name="adresse"]').value,
    adresseComplement = query('input[name="adresse:complement"]').value,
    codePostal = query('input[name="code_postal"]').value,
    ville = query('input[name="ville"]').value,
    courriel = query('input[name="courriel"]').value,
    url = query('input[name="url"]').value,
    telFixe = query('input[name="telephone:fixe"]').value,
    telFax = query('input[name="telephone:fax"]').value,
    urlGeneawiki = query('input[name="url:geneawiki"]').value,
    note = query('textarea[name="note"]').value;
    return {
      'nom': nom,
      'type': type,
      'code': code,
      'adresse': adresse,
      'adresse:complement': adresseComplement,
      'code_postal': codePostal,
      'ville': ville,
      'courriel': courriel,
      'url': url,
      'telephone:fixe': telFixe,
      'telephone:fax': telFax,
      'url:geneawiki': urlGeneawiki,
      'note': note
    };
  }
  
  void addEnd(HttpRequest request) {
    if (request.status != 201) {
      showError(request);
    } else {
      showSuccess('Une nouvelle structure avec l\'id #${request.responseText} a été ajoutée.');
    }
  }
  
  void updateWarehouse(Event e) {
    e.preventDefault();
    var id = query('input[name="id"]').value,
    dataUrl = 'http://localhost/dart/depim/server/services/0.1/structure/$id',
    meta = {
      'utilisateurId' : 1,
      'tags' : {
        'etat' : 'M',
        'type' : 'structure',
        'commentaire' : 'Modification de la structure #$id.'
      }
    },
    tags = getTags(),
    data = {'meta' : meta, 'tags': tags},
    encodedData = JSON.stringify(data);
    
    var httpRequest = new HttpRequest();
    httpRequest.open('POST', dataUrl);
    httpRequest.setRequestHeader('Content-type', 'application/json');
    httpRequest.on.loadEnd.add((e) => updateEnd(httpRequest, id));
    httpRequest.send(encodedData);
  }
  
  void updateEnd(HttpRequest request, String id) {
    if (request.status != 200) {
      showError(request);
    } else {
      showSuccess('La structure avec l\'id #$id a été modifiée.');
    }
  }
  
  void deleteWarehouse(Event e) {
    Element clickedElem = e.target;
    var idStructure = clickedElem.attributes['data-id'],
    meta = {
      'utilisateurId' : 1,
      'tags' : {
        'etat' : 'S',
        'type' : 'structure',
        'commentaire' : 'Suppression de la strucutre $idStructure.'
      }
    },
    data = {'meta' : meta},
    encodedData = JSON.stringify(data),
    url = 'http://localhost/dart/depim/server/services/0.1/structure/$idStructure',
    httpRequest = new HttpRequest();
    httpRequest.open('DELETE', url);
    httpRequest.setRequestHeader('Content-type', 'application/json');
    httpRequest.on.loadEnd.add((e) => deleteEnd(httpRequest));
    print(encodedData);
    httpRequest.send(encodedData);
  }
  
  void deleteEnd(HttpRequest request) {
    if (request.status != 204) {
      showError(request);
    } else {
      showSuccess('Data has been deleted.');
    }
  }
  
  void resetWarehouse(Event e) {
    // Show delete command
    queryAll('.delete-warehouse-cmd, .update-warehouse-cmd').forEach((elem) {
      elem.attributes.remove('data-id');
      elem.classes.add('hide');
    });
    query('.field[name="id"]').attributes.remove('value');
  }
  
  void showError(HttpRequest request) {
    var msg = 'Une erreur de type ${request.status} est survenue. \n ${request.responseText}';
    new Message('error').show(msg);
  }
  
  void showSuccess(String msg) {
    new Message('success').show(msg);
    this.loadWarehouses();
  }
}

